// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Encode.Bytes.Models;
using NUnit.Framework;

namespace Encode.Bytes.Samples
{
    internal class Samples_Property
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Default()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = client.Default(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Default_AllParameters()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = client.Default(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Default_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = await client.DefaultAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Default_AllParameters_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = await client.DefaultAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Default_Convenience_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var body = new DefaultBytesProperty(BinaryData.FromString("<your binary data content>"));
            var result = await client.DefaultAsync(body).ConfigureAwait(false);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Base64()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = client.Base64(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Base64_AllParameters()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = client.Base64(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Base64_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = await client.Base64Async(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Base64_AllParameters_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = await client.Base64Async(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Base64_Convenience_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var body = new Base64BytesProperty(BinaryData.FromString("<your binary data content>"));
            var result = await client.Base64Async(body).ConfigureAwait(false);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Base64url()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = client.Base64url(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Base64url_AllParameters()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = client.Base64url(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Base64url_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = await client.Base64urlAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Base64url_AllParameters_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = BinaryData.FromString("<your binary data content>"),
            };

            Response response = await client.Base64urlAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Base64url_Convenience_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var body = new Base64urlBytesProperty(BinaryData.FromString("<your binary data content>"));
            var result = await client.Base64urlAsync(body).ConfigureAwait(false);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Base64urlArray()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = new[] {
        BinaryData.FromString("<your binary data content>")
    },
            };

            Response response = client.Base64urlArray(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_Base64urlArray_AllParameters()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = new[] {
        BinaryData.FromString("<your binary data content>")
    },
            };

            Response response = client.Base64urlArray(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Base64urlArray_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = new[] {
        BinaryData.FromString("<your binary data content>")
    },
            };

            Response response = await client.Base64urlArrayAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Base64urlArray_AllParameters_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var data = new
            {
                value = new[] {
        BinaryData.FromString("<your binary data content>")
    },
            };

            Response response = await client.Base64urlArrayAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("value")[0].ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_Base64urlArray_Convenience_Async()
        {
            var client = new BytesClient().GetPropertyClient("1.0.0");

            var body = new Base64urlArrayBytesProperty(new BinaryData[]
            {
    BinaryData.FromString("<your binary data content>")
            });
            var result = await client.Base64urlArrayAsync(body).ConfigureAwait(false);
        }
    }
}
