// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Multipart.Models;

namespace Multipart
{
    internal partial class MultipartRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of MultipartRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public MultipartRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            this.endpoint = endpoint ?? new Uri("http://localhost:3000");
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateOperationRequest(bool? boolProp, int? intProp, int? numberInt32Prop, long? numberInt64Prop, float? numberFloatProp, double? numberDoubleProp, DateTimeOffset? dateProp, DateTimeOffset? datetimeProp, DateTimeOffset? datetimeRfc1123Prop, Guid? uuidProp, Uri urlProp, PostContentSchemaObjProp objProp, Stream fileName1, Stream fileName2, IEnumerable<Stream> arrayOfDatetimeProp, IEnumerable<PostContentSchemaArrayOfObjPropItem> arrayOfObjProp)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/multipart/", false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "multipart/form-data");
            var content = new MultipartFormDataContent();
            if (boolProp != null)
            {
                content.AddPart("boolProp", boolProp.Value);
            }
            if (intProp != null)
            {
                content.AddPart("intProp", intProp.Value);
            }
            if (numberInt32Prop != null)
            {
                content.AddPart("numberInt32Prop", numberInt32Prop.Value);
            }
            if (numberInt64Prop != null)
            {
                content.AddPart("numberInt64Prop", numberInt64Prop.Value);
            }
            if (numberFloatProp != null)
            {
                content.AddPart("numberFloatProp", numberFloatProp.Value);
            }
            if (numberDoubleProp != null)
            {
                content.AddPart("numberDoubleProp", numberDoubleProp.Value);
            }
            if (dateProp != null)
            {
                content.AddPart("dateProp", dateProp.Value);
            }
            if (datetimeProp != null)
            {
                content.AddPart("datetimeProp", datetimeProp.Value);
            }
            if (datetimeRfc1123Prop != null)
            {
                content.AddPart("datetimeRfc1123Prop", datetimeRfc1123Prop.Value);
            }
            if (uuidProp != null)
            {
                content.AddPart("uuidProp", uuidProp.Value);
            }
            if (urlProp != null)
            {
                content.AddPart("urlProp", urlProp);
            }
            // here should be serialization for AutoRest.CSharp.Output.Models.Requests.ReferenceOrConstant
            if (fileName1 != null)
            {
                content.Add(RequestContent.Create(fileName1), "fileName1", null);
            }
            if (fileName2 != null)
            {
                content.Add(RequestContent.Create(fileName2), "fileName2", null);
            }
            foreach (var value in arrayOfDatetimeProp)
            {
                content.Add(RequestContent.Create(value), "arrayOfDatetimeProp", null);
            }
            foreach (var value in arrayOfObjProp)
            {
                content.Add(RequestContent.Create(value), "arrayOfObjProp", null);
            }
            content.ApplyToRequest(request);
            return message;
        }

        /// <param name="boolProp"> The Boolean to use. </param>
        /// <param name="intProp"> The PostContentSchemaIntProp to use. </param>
        /// <param name="numberInt32Prop"> The PostContentSchemaNumberInt32Prop to use. </param>
        /// <param name="numberInt64Prop"> The PostContentSchemaNumberInt64Prop to use. </param>
        /// <param name="numberFloatProp"> The PostContentSchemaNumberFloatProp to use. </param>
        /// <param name="numberDoubleProp"> The PostContentSchemaNumberDoubleProp to use. </param>
        /// <param name="dateProp"> The PostContentSchemaDateProp to use. </param>
        /// <param name="datetimeProp"> The PostContentSchemaDatetimeProp to use. </param>
        /// <param name="datetimeRfc1123Prop"> The PostContentSchemaDatetimeRfc1123Prop to use. </param>
        /// <param name="uuidProp"> The PostContentSchemaUuidProp to use. </param>
        /// <param name="urlProp"> The PostContentSchemaUrlProp to use. </param>
        /// <param name="objProp"> The PostContentSchemaObjProp to use. </param>
        /// <param name="fileName1"> The binary to use. </param>
        /// <param name="fileName2"> The binary to use. </param>
        /// <param name="arrayOfDatetimeProp"> The PostContentSchemaArrayOfDatetimeProp to use. </param>
        /// <param name="arrayOfObjProp"> The PostContentSchemaArrayOfObjProp to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response> OperationAsync(bool? boolProp = null, int? intProp = null, int? numberInt32Prop = null, long? numberInt64Prop = null, float? numberFloatProp = null, double? numberDoubleProp = null, DateTimeOffset? dateProp = null, DateTimeOffset? datetimeProp = null, DateTimeOffset? datetimeRfc1123Prop = null, Guid? uuidProp = null, Uri urlProp = null, PostContentSchemaObjProp objProp = null, Stream fileName1 = null, Stream fileName2 = null, IEnumerable<Stream> arrayOfDatetimeProp = null, IEnumerable<PostContentSchemaArrayOfObjPropItem> arrayOfObjProp = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateOperationRequest(boolProp, intProp, numberInt32Prop, numberInt64Prop, numberFloatProp, numberDoubleProp, dateProp, datetimeProp, datetimeRfc1123Prop, uuidProp, urlProp, objProp, fileName1, fileName2, arrayOfDatetimeProp, arrayOfObjProp);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <param name="boolProp"> The Boolean to use. </param>
        /// <param name="intProp"> The PostContentSchemaIntProp to use. </param>
        /// <param name="numberInt32Prop"> The PostContentSchemaNumberInt32Prop to use. </param>
        /// <param name="numberInt64Prop"> The PostContentSchemaNumberInt64Prop to use. </param>
        /// <param name="numberFloatProp"> The PostContentSchemaNumberFloatProp to use. </param>
        /// <param name="numberDoubleProp"> The PostContentSchemaNumberDoubleProp to use. </param>
        /// <param name="dateProp"> The PostContentSchemaDateProp to use. </param>
        /// <param name="datetimeProp"> The PostContentSchemaDatetimeProp to use. </param>
        /// <param name="datetimeRfc1123Prop"> The PostContentSchemaDatetimeRfc1123Prop to use. </param>
        /// <param name="uuidProp"> The PostContentSchemaUuidProp to use. </param>
        /// <param name="urlProp"> The PostContentSchemaUrlProp to use. </param>
        /// <param name="objProp"> The PostContentSchemaObjProp to use. </param>
        /// <param name="fileName1"> The binary to use. </param>
        /// <param name="fileName2"> The binary to use. </param>
        /// <param name="arrayOfDatetimeProp"> The PostContentSchemaArrayOfDatetimeProp to use. </param>
        /// <param name="arrayOfObjProp"> The PostContentSchemaArrayOfObjProp to use. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response Operation(bool? boolProp = null, int? intProp = null, int? numberInt32Prop = null, long? numberInt64Prop = null, float? numberFloatProp = null, double? numberDoubleProp = null, DateTimeOffset? dateProp = null, DateTimeOffset? datetimeProp = null, DateTimeOffset? datetimeRfc1123Prop = null, Guid? uuidProp = null, Uri urlProp = null, PostContentSchemaObjProp objProp = null, Stream fileName1 = null, Stream fileName2 = null, IEnumerable<Stream> arrayOfDatetimeProp = null, IEnumerable<PostContentSchemaArrayOfObjPropItem> arrayOfObjProp = null, CancellationToken cancellationToken = default)
        {
            using var message = CreateOperationRequest(boolProp, intProp, numberInt32Prop, numberInt64Prop, numberFloatProp, numberDoubleProp, dateProp, datetimeProp, datetimeRfc1123Prop, uuidProp, urlProp, objProp, fileName1, fileName2, arrayOfDatetimeProp, arrayOfObjProp);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    return message.Response;
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
