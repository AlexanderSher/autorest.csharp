// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using ConfidentLevelsInTsp.Models;
using NUnit.Framework;

namespace ConfidentLevelsInTsp.Samples
{
    public class Samples_ConfidentLevelsInTspClient
    {
        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInRequestProperty()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                unionProperty = new object(),
            };

            Response response = client.UnionInRequestProperty(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInRequestProperty_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                unionProperty = new object(),
            };

            Response response = client.UnionInRequestProperty(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInRequestProperty_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                unionProperty = new object(),
            };

            Response response = await client.UnionInRequestPropertyAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInRequestProperty_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                unionProperty = new object(),
            };

            Response response = await client.UnionInRequestPropertyAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInResponseProperty()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                age = 1234,
            };

            Response response = client.UnionInResponseProperty(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionInResponseProperty_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                age = 1234,
                size = 3.14d,
            };

            Response response = client.UnionInResponseProperty(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInResponseProperty_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                age = 1234,
            };

            Response response = await client.UnionInResponsePropertyAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionInResponseProperty_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                age = 1234,
                size = 3.14d,
            };

            Response response = await client.UnionInResponsePropertyAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("unionProperty").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithSelfReference()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                unionProperty = new object(),
            };

            Response response = client.UnionWithSelfReference(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithSelfReference_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                unionProperty = new object(),
            };

            Response response = client.UnionWithSelfReference(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithSelfReference_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                unionProperty = new object(),
            };

            Response response = await client.UnionWithSelfReferenceAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithSelfReference_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                unionProperty = new object(),
            };

            Response response = await client.UnionWithSelfReferenceAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithInderict()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
            };

            Response response = client.UnionWithInderict(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnionWithInderict_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                reference = new[] {
        new {
            something = "<something>",
            reference = new {
                name = "<name>",
                unionProperty = new object(),
            },
            unionProperty = new object(),
        }
    },
            };

            Response response = client.UnionWithInderict(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithInderict_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
            };

            Response response = await client.UnionWithInderictAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnionWithInderict_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                reference = new[] {
        new {
            something = "<something>",
            reference = new {
                name = "<name>",
                unionProperty = new object(),
            },
            unionProperty = new object(),
        }
    },
            };

            Response response = await client.UnionWithInderictAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfInteger()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                id = 1,
            };

            Response response = client.LiteralOfInteger(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfInteger_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                id = 1,
            };

            Response response = client.LiteralOfInteger(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfInteger_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                id = 1,
            };

            Response response = await client.LiteralOfIntegerAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfInteger_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                id = 1,
            };

            Response response = await client.LiteralOfIntegerAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfFloat()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                id = 3.141592F,
            };

            Response response = client.LiteralOfFloat(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_LiteralOfFloat_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                id = 3.141592F,
            };

            Response response = client.LiteralOfFloat(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfFloat_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                id = 3.141592F,
            };

            Response response = await client.LiteralOfFloatAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_LiteralOfFloat_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
                id = 3.141592F,
            };

            Response response = await client.LiteralOfFloatAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConfidentOperationWithDiscriminator()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            };

            Response response = client.ConfidentOperationWithDiscriminator(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_ConfidentOperationWithDiscriminator_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            };

            Response response = client.ConfidentOperationWithDiscriminator(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            };

            Response response = await client.ConfidentOperationWithDiscriminatorAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            };

            Response response = await client.ConfidentOperationWithDiscriminatorAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_ConfidentOperationWithDiscriminator_Convenience_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var input = new Cat("<name>", "<meow>");
            var result = await client.ConfidentOperationWithDiscriminatorAsync(input).ConfigureAwait(false);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedBaseMethod()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                woof = "<woof>",
                color = new object(),
                kind = "dog",
                name = "<name>",
            };

            Response response = client.PollutedBaseMethod(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedBaseMethod_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                woof = "<woof>",
                color = new object(),
                kind = "dog",
                name = "<name>",
            };

            Response response = client.PollutedBaseMethod(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedBaseMethod_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                woof = "<woof>",
                color = new object(),
                kind = "dog",
                name = "<name>",
            };

            Response response = await client.PollutedBaseMethodAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedBaseMethod_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                woof = "<woof>",
                color = new object(),
                kind = "dog",
                name = "<name>",
            };

            Response response = await client.PollutedBaseMethodAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedDerivedMethod()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                woof = "<woof>",
                color = new object(),
                kind = "dog",
                name = "<name>",
            };

            Response response = client.PollutedDerivedMethod(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_PollutedDerivedMethod_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                woof = "<woof>",
                color = new object(),
                kind = "dog",
                name = "<name>",
            };

            Response response = client.PollutedDerivedMethod(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedDerivedMethod_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                woof = "<woof>",
                color = new object(),
                kind = "dog",
                name = "<name>",
            };

            Response response = await client.PollutedDerivedMethodAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_PollutedDerivedMethod_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                woof = "<woof>",
                color = new object(),
                kind = "dog",
                name = "<name>",
            };

            Response response = await client.PollutedDerivedMethodAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("woof").ToString());
            Console.WriteLine(result.GetProperty("color").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnpollutedDerivedMethod()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            };

            Response response = client.UnpollutedDerivedMethod(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UnpollutedDerivedMethod_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            };

            Response response = client.UnpollutedDerivedMethod(RequestContent.Create(data));

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnpollutedDerivedMethod_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            };

            Response response = await client.UnpollutedDerivedMethodAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UnpollutedDerivedMethod_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                meow = "<meow>",
                kind = "cat",
                name = "<name>",
            };

            Response response = await client.UnpollutedDerivedMethodAsync(RequestContent.Create(data)).ConfigureAwait(false);

            JsonElement result = JsonDocument.Parse(response.ContentStream).RootElement;
            Console.WriteLine(result.GetProperty("meow").ToString());
            Console.WriteLine(result.GetProperty("kind").ToString());
            Console.WriteLine(result.GetProperty("name").ToString());
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModel()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
            };

            Response response = client.UseDerivedModel(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModel_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                age = 1234,
                name = "<name>",
                size = 3.14d,
            };

            Response response = client.UseDerivedModel(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModel_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                name = "<name>",
            };

            Response response = await client.UseDerivedModelAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModel_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                age = 1234,
                name = "<name>",
                size = 3.14d,
            };

            Response response = await client.UseDerivedModelAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModelWithUnion()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                unionProperty = new object(),
                name = "<name>",
            };

            Response response = client.UseDerivedModelWithUnion(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public void Example_UseDerivedModelWithUnion_AllParameters()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                unionProperty = new object(),
                name = "<name>",
                size = 3.14d,
            };

            Response response = client.UseDerivedModelWithUnion(RequestContent.Create(data));
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModelWithUnion_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                unionProperty = new object(),
                name = "<name>",
            };

            Response response = await client.UseDerivedModelWithUnionAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }

        [Test]
        [Ignore("Only validating compilation of examples")]
        public async Task Example_UseDerivedModelWithUnion_AllParameters_Async()
        {
            var endpoint = new Uri("<https://my-service.azure.com>");
            var client = new ConfidentLevelsInTspClient(endpoint);

            var data = new
            {
                unionProperty = new object(),
                name = "<name>",
                size = 3.14d,
            };

            Response response = await client.UseDerivedModelWithUnionAsync(RequestContent.Create(data)).ConfigureAwait(false);
            Console.WriteLine(response.Status);
        }
    }
}
