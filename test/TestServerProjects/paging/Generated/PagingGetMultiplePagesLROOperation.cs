// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using paging.Models;

namespace paging
{
    /// <summary> A long-running paging operation that includes a nextLink that has 10 pages. </summary>
    public partial class PagingGetMultiplePagesLROOperation : Operation<AsyncPageable<Product>>
    {
        private readonly OperationInternal<AsyncPageable<Product>> _operation;
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly Func<string, CancellationToken, Task<Response>> _nextPageFunc;

        /// <summary> Initializes a new instance of PagingGetMultiplePagesLROOperation for mocking. </summary>
        protected PagingGetMultiplePagesLROOperation()
        {
        }

        internal PagingGetMultiplePagesLROOperation(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Request request, Response response, Func<string, CancellationToken, Task<Response>> nextPageFunc)
        {
            IOperation<AsyncPageable<Product>> nextLinkOperation = NextLinkOperationImplementation.Create(CreateResultAsync, pipeline, request.Method, request.Uri.ToUri(), response, OperationFinalStateVia.Location);
            _operation = new OperationInternal<AsyncPageable<Product>>(clientDiagnostics, nextLinkOperation, response, "PagingGetMultiplePagesLROOperation");
            _clientDiagnostics = clientDiagnostics;
            _nextPageFunc = nextPageFunc;
        }

        /// <inheritdoc />
#pragma warning disable CA1822
        public override string Id => throw new NotImplementedException();
#pragma warning restore CA1822

        /// <inheritdoc />
        public override AsyncPageable<Product> Value => _operation.Value;

        /// <inheritdoc />
        public override bool HasCompleted => _operation.HasCompleted;

        /// <inheritdoc />
        public override bool HasValue => _operation.HasValue;

        /// <inheritdoc />
        public override Response GetRawResponse() => _operation.RawResponse;

        /// <inheritdoc />
        public override Response UpdateStatus(CancellationToken cancellationToken = default) => _operation.UpdateStatus(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response> UpdateStatusAsync(CancellationToken cancellationToken = default) => _operation.UpdateStatusAsync(cancellationToken);

        /// <inheritdoc />
        public override Response<AsyncPageable<Product>> WaitForCompletion(CancellationToken cancellationToken = default) => _operation.WaitForCompletion(cancellationToken);

        /// <inheritdoc />
        public override Response<AsyncPageable<Product>> WaitForCompletion(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletion(pollingInterval, cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<AsyncPageable<Product>>> WaitForCompletionAsync(CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(cancellationToken);

        /// <inheritdoc />
        public override ValueTask<Response<AsyncPageable<Product>>> WaitForCompletionAsync(TimeSpan pollingInterval, CancellationToken cancellationToken = default) => _operation.WaitForCompletionAsync(pollingInterval, cancellationToken);

        private ValueTask<AsyncPageable<Product>> CreateResultAsync(bool @async, Response response, CancellationToken cancellationToken)
        {
            return new ValueTask<AsyncPageable<Product>>(PageableHelpers.CreateAsyncPageable(CreateEnumerableAsync, response, _clientDiagnostics, "PagingGetMultiplePagesLROOperation"));
        }

        private async IAsyncEnumerable<Page<Product>> CreateEnumerableAsync(Response response, string nextLink, int? pageSizeHint, [EnumeratorCancellation] CancellationToken cancellationToken)
        {
            bool firstIteration = true;
            while (firstIteration || !string.IsNullOrEmpty(nextLink))
            {
                if (firstIteration)
                {
                    firstIteration = false;
                }
                else
                {
                    response = await _nextPageFunc(nextLink, cancellationToken).ConfigureAwait(false);
                }

                using var document = await JsonDocument.ParseAsync(response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                ProductResult result = ProductResult.DeserializeProductResult(document.RootElement);
                Page<Product> page = Page.FromValues(result.Values, result.NextLink, response);
                nextLink = page.ContinuationToken;
                yield return page;
            }
        }
    }
}
